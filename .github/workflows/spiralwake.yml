name: SpiralWake CI/CD

permissions:
  contents: read

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.10'
  ANDROID_SDK_VERSION: '33'

jobs:
  validate:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate repository structure
        run: |
          for dir in backend frontend scripts; do
            if [ ! -d "$dir" ]; then
              echo "Error: Required directory '$dir' is missing"
              exit 1
            fi
          done

  lint:
    needs: validate
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black isort mypy

      - name: Lint Python
        run: |
          black --check backend
          isort --check-only backend
          flake8 backend --max-line-length=120
          mypy backend

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install Node.js dependencies
        working-directory: frontend
        run: |
          npm ci
          npm install -g prettier solhint

      - name: Lint TypeScript
        working-directory: frontend
        run: |
          npx eslint . --ext .ts,.tsx --max-warnings 0
          prettier --check "src/**/*.{ts,tsx}"

      - name: Lint Solidity
        run: |
          solhint "frontend/src/contracts/**/*.sol"

  test:
    needs: lint
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        test-type: ['backend', 'frontend', 'contracts']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        if: matrix.test-type == 'backend'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Run Backend Tests
        if: matrix.test-type == 'backend'
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio
          pytest backend/tests --cov=backend --cov-report=xml

      - name: Set up Node.js
        if: matrix.test-type != 'backend'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Run Frontend Tests
        if: matrix.test-type == 'frontend'
        working-directory: frontend
        run: |
          npm ci
          npm run test:coverage

      - name: Run Contract Tests
        if: matrix.test-type == 'contracts'
        working-directory: frontend
        run: |
          npm ci
          npx hardhat compile
          npx hardhat test
          npx hardhat coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml,./frontend/coverage/lcov.info
          flags: ${{ matrix.test-type }}

  build:
    needs: test
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          sdk-version: ${{ env.ANDROID_SDK_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install dependencies and build
        working-directory: frontend
        run: |
          npm ci
          npm run build
          npx cap sync
          npx cap add android
          npx cap copy android

      - name: Build Android Debug APK
        working-directory: frontend/android
        run: |
          chmod +x gradlew
          ./gradlew assembleDebug

      - name: Build Android Release APK
        if: github.ref == 'refs/heads/main'
        working-directory: frontend/android
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          echo "${{ secrets.RELEASE_KEYSTORE }}" | base64 -d > app/release.keystore
          ./gradlew assembleRelease

      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: spiralwake-debug-apk
          path: frontend/android/app/build/outputs/apk/debug/*.apk

      - name: Upload Release APK
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: spiralwake-release-apk
          path: frontend/android/app/build/outputs/apk/release/*.apk

  deploy:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-22.04
    environment: production
    concurrency: production_environment
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Release APK
        uses: actions/download-artifact@v4
        with:
          name: spiralwake-release-apk
          path: artifacts/

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Deploy to IPFS
        uses: web3-storage/add-to-web3@v2
        id: ipfs
        with:
          path_to_add: artifacts/
          web3_token: ${{ secrets.WEB3_STORAGE_TOKEN }}

      - name: Deploy Smart Contracts
        working-directory: frontend
        env:
          POLYGON_ZKEVM_PRIVATE_KEY: ${{ secrets.POLYGON_ZKEVM_PRIVATE_KEY }}
          POLYGON_ZKEVM_RPC_URL: ${{ secrets.POLYGON_ZKEVM_RPC_URL }}
        run: |
          npm ci
          npx hardhat run scripts/deploy.js --network polygon_zkevm

      - name: Generate Deployment Report
        run: |
          {
            echo "Deployment Summary"
            echo "=================="
            echo "IPFS CID: ${{ steps.ipfs.outputs.cid }}"
            echo "Contract Addresses:" 
            cat frontend/deployment-addresses.json
          } > deployment-report.txt

  release:
    needs: deploy
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          name: SpiralWake v${{ github.run_number }}
          body_path: deployment-report.txt
          draft: false
          prerelease: false
          files: |
            artifacts/*.apk
            deployment-report.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    needs: [release, deploy]
    if: always()
    runs-on: ubuntu-22.04
    steps:
      - name: Notify Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

