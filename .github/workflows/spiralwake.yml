name: SpiralWake CI/CD

permissions:
  contents: read

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Python Setup
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi

      - name: Lint Python
        run: |
          if [ -d "backend" ]; then
            flake8 backend --max-line-length=120
          fi

      # Node.js Setup
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install frontend dependencies
        working-directory: frontend
        run: |
          if [ -f "package.json" ]; then
            npm ci || npm install
            npm install -D eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin eslint-plugin-react eslint-plugin-react-hooks
          fi

      - name: Create ESLint config
        working-directory: frontend
        run: |
          cat > .eslintrc.json << 'EOF'
          {
            "root": true,
            "parser": "@typescript-eslint/parser",
            "plugins": ["@typescript-eslint", "react", "react-hooks"],
            "extends": [
              "eslint:recommended",
              "plugin:@typescript-eslint/recommended",
              "plugin:react/recommended",
              "plugin:react-hooks/recommended"
            ],
            "rules": {
              "react/react-in-jsx-scope": "off"
            },
            "settings": {
              "react": {
                "version": "detect"
              }
            }
          }
          EOF

      - name: Lint TypeScript
        working-directory: frontend
        run: |
          if [ -d "src" ]; then
            npx eslint . --ext .ts,.tsx
          fi

      - name: Install and run Solhint
        working-directory: frontend
        run: |
          if [ -d "src/contracts" ]; then
            npm install -g solhint
            solhint 'src/contracts/**/*.sol'
          fi

  test:
    runs-on: ubuntu-22.04
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Python Tests
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Python test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi

      - name: Run Python tests
        run: |
          if [ -d "backend/tests" ]; then
            pytest backend/tests --cov=backend --cov-report=xml
          fi

      # Node.js Tests
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install frontend test dependencies
        working-directory: frontend
        run: |
          if [ -f "package.json" ]; then
            npm ci || npm install
            npm install -D jest @types/jest ts-jest
          fi

      - name: Run TypeScript tests
        working-directory: frontend
        run: |
          if [ -d "src" ]; then
            npx jest --ci --coverage
          fi

      - name: Run Solidity tests
        working-directory: frontend
        run: |
          if [ -d "src/contracts" ]; then
            npm install --save-dev hardhat @nomiclabs/hardhat-ethers ethers @openzeppelin/contracts
            npx hardhat test
          fi

  build:
    runs-on: ubuntu-22.04
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies and build
        working-directory: frontend
        run: |
          if [ -f "package.json" ]; then
            npm ci || npm install
            npm run build
          fi

      - name: Setup Android build tools
        uses: android-actions/setup-android@v3

      - name: Build Android
        working-directory: frontend
        run: |
          if [ -f "package.json" ]; then
            npm install @capacitor/android
            npx cap sync
            npx cap build android --no-open
          fi

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: spiralwake-apk
          path: frontend/android/app/build/outputs/apk/release/app-release.apk
          if-no-files-found: error

  deploy:
    runs-on: ubuntu-22.04
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download APK
        uses: actions/download-artifact@v4
        with:
          name: spiralwake-apk
          path: artifacts

      - name: Deploy to IPFS
        run: |
          if [ -f "artifacts/app-release.apk" ]; then
            npm install -g ipfs-http-client
            ipfs add artifacts/app-release.apk > ipfs_output.txt
            echo "IPFS_CID=$(grep added ipfs_output.txt | awk '{print $2}')" >> $GITHUB_ENV
          fi
        env:
          IPFS_API_KEY: ${{ secrets.IPFS_API_KEY }}

      - name: Deploy contracts
        working-directory: frontend
        run: |
          if [ -d "src/contracts" ]; then
            npm install --save-dev hardhat @nomiclabs/hardhat-ethers ethers
            npx hardhat run scripts/deploy.js --network polygon_zkevm
          fi
        env:
          POLYGON_ZKEVM_PRIVATE_KEY: ${{ secrets.POLYGON_ZKEVM_PRIVATE_KEY }}
          POLYGON_ZKEVM_RPC_URL: https://rpc.polygon-zkevm.io

      - name: Create deployment summary
        run: |
          echo "Deployment Summary" > deployment.txt
          echo "----------------" >> deployment.txt
          echo "APK IPFS CID: ${{ env.IPFS_CID }}" >> deployment.txt
          echo "Deployed to Polygon zkEVM" >> deployment.txt
          echo "Timestamp: $(date -u)" >> deployment.txt

      - name: Upload deployment details
        uses: actions/upload-artifact@v4
        with:
          name: deployment-details
          path: deployment.txt

  release:
    runs-on: ubuntu-22.04
    needs: deploy
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          name: SpiralWake Release v${{ github.run_number }}
          files: |
            artifacts/spiralwake-apk/*
            artifacts/deployment-details/*
          body_path: artifacts/deployment-details/deployment.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
