name: SpiralWake CI/CD

permissions:
  contents: read

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install Python dependencies with retries
        run: |
          for i in {1..3}; do
            python -m pip install --upgrade pip
            pip install flake8
            pip install -r requirements.txt && break
            echo "Attempt $i failed, retrying..."
            sleep 5
          done || (echo "Dependency installation failed"; pip list; exit 1)
        continue-on-error: false

      - name: Lint Python
        run: flake8 backend --max-line-length=120

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install Node.js dependencies
        run: |
          cd frontend
          npm ci || npm install
        continue-on-error: false

      - name: Lint TypeScript
        run: |
          cd frontend
          if [ ! -f .eslintrc.js ]; then
            echo "module.exports = {
              parser: '@typescript-eslint/parser',
              extends: [
                'eslint:recommended',
                'plugin:@typescript-eslint/recommended',
                'plugin:react/recommended',
                'plugin:react-hooks/recommended'
              ],
              plugins: ['@typescript-eslint', 'react', 'react-hooks'],
              env: {
                browser: true,
                es2021: true,
                node: true
              },
              settings: {
                react: {
                  version: 'detect'
                }
              },
              rules: {
                'react/react-in-jsx-scope': 'off',
                '@typescript-eslint/explicit-module-boundary-types': 'off',
                '@typescript-eslint/no-explicit-any': 'warn'
              }
            };" > .eslintrc.js
          fi
          npx eslint 'src/**/*.{ts,tsx}' --max-warnings 0

      - name: Install Solhint
        run: npm install -g solhint

      - name: Lint Solidity
        run: |
          solhint frontend/src/contracts/*.sol

  test:
    runs-on: ubuntu-22.04
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          pip install -r requirements.txt

      - name: Run Python tests
        run: pytest backend/tests

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Node.js dependencies
        run: |
          cd frontend
          npm ci || npm install

      - name: Run TypeScript tests
        run: |
          cd frontend
          npx jest

      - name: Install and run Hardhat tests
        run: |
          cd frontend
          npm install --save-dev hardhat @nomiclabs/hardhat-ethers ethers @openzeppelin/contracts
          npx hardhat test

  build:
    runs-on: ubuntu-22.04
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd frontend
          npm ci || npm install

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Build APK
        run: |
          cd frontend
          npx cap sync
          npx cap build android
        env:
          CAPACITOR_ANDROID_STUDIO_PATH: /usr/local/android-studio/bin/studio.sh

      - name: Compile Solidity contracts
        run: |
          cd frontend
          npx hardhat compile

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: spiralwake-apk
          path: frontend/android/app/build/outputs/apk/release/app-release.apk

  deploy:
    runs-on: ubuntu-22.04
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download APK artifact
        uses: actions/download-artifact@v4
        with:
          name: spiralwake-apk
          path: artifacts/

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup IPFS
        run: npm install -g ipfs-http-client

      - name: Deploy to IPFS
        run: |
          ipfs add artifacts/app-release.apk > ipfs_output.txt
          CID=$(grep "added" ipfs_output.txt | awk '{print $2}')
          echo "IPFS_CID=$CID" >> $GITHUB_ENV
        env:
          IPFS_API_KEY: ${{ secrets.IPFS_API_KEY }}

      - name: Deploy contracts
        run: |
          cd frontend
          npm install --save-dev hardhat @nomiclabs/hardhat-ethers ethers
          npx hardhat run scripts/deploy.js --network polygon_zkevm
        env:
          POLYGON_ZKEVM_PRIVATE_KEY: ${{ secrets.POLYGON_ZKEVM_PRIVATE_KEY }}
          POLYGON_ZKEVM_RPC_URL: https://rpc.polygon-zkevm.io

      - name: Save deployment details
        run: |
          echo "APK deployed to: ipfs://$IPFS_CID" > deployment.txt
          echo "Contracts deployed to Polygon zkEVM" >> deployment.txt

      - name: Upload deployment details
        uses: actions/upload-artifact@v4
        with:
          name: deployment-details
          path: deployment.txt

  release:
    runs-on: ubuntu-22.04
    needs: deploy
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download deployment details
        uses: actions/download-artifact@v4
        with:
          name: deployment-details
          path: artifacts/

      - name: Download APK
        uses: actions/download-artifact@v4
        with:
          name: spiralwake-apk
          path: artifacts/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          name: SpiralWake Release v${{ github.run_number }}
          body_path: artifacts/deployment.txt
          files: |
            artifacts/app-release.apk
            artifacts/deployment.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
